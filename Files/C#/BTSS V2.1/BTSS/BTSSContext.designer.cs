#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3649
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Biztech
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="btsssql")]
	public partial class BTSSContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActiveDirectoryGroup(ActiveDirectoryGroup instance);
    partial void UpdateActiveDirectoryGroup(ActiveDirectoryGroup instance);
    partial void DeleteActiveDirectoryGroup(ActiveDirectoryGroup instance);
    partial void InsertAudit(Audit instance);
    partial void UpdateAudit(Audit instance);
    partial void DeleteAudit(Audit instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupModule(GroupModule instance);
    partial void UpdateGroupModule(GroupModule instance);
    partial void DeleteGroupModule(GroupModule instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertPreferences(Preferences instance);
    partial void UpdatePreferences(Preferences instance);
    partial void DeletePreferences(Preferences instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertUserProject(UserProject instance);
    partial void UpdateUserProject(UserProject instance);
    partial void DeleteUserProject(UserProject instance);
    #endregion
		
		public BTSSContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BTSSContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BTSSContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BTSSContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ActiveDirectoryGroup> ActiveDirectoryGroup
		{
			get
			{
				return this.GetTable<ActiveDirectoryGroup>();
			}
		}
		
		public System.Data.Linq.Table<Audit> Audit
		{
			get
			{
				return this.GetTable<Audit>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupModule> GroupModule
		{
			get
			{
				return this.GetTable<GroupModule>();
			}
		}
		
		public System.Data.Linq.Table<Module> Module
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<Preferences> Preferences
		{
			get
			{
				return this.GetTable<Preferences>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<TempTable> TempTable
		{
			get
			{
				return this.GetTable<TempTable>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroup
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<UserProject> UserProject
		{
			get
			{
				return this.GetTable<UserProject>();
			}
		}
		
		[Function(Name="dbo.AlterObject")]
		[return: Parameter(DbType="Int")]
		public int AlterObject()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.CreateAuditTrigger")]
		[return: Parameter(DbType="Int")]
		public int CreateAuditTrigger([Parameter(Name="TableName", DbType="VarChar(200)")] string tableName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.CreateBackUp")]
		[return: Parameter(DbType="Int")]
		public int CreateBackUp()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.CreateSQLUSER")]
		public ISingleResult<CreateSQLUSERResult> CreateSQLUSER()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<CreateSQLUSERResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetAccessRights")]
		public ISingleResult<GetAccessRightsResult> GetAccessRights([Parameter(Name="UserId", DbType="VarChar(50)")] string userId, [Parameter(Name="ModuleTag", DbType="VarChar(50)")] string moduleTag)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, moduleTag);
			return ((ISingleResult<GetAccessRightsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetActiveDirectoryGroupList")]
		public ISingleResult<GetActiveDirectoryGroupListResult> GetActiveDirectoryGroupList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetActiveDirectoryGroupListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetAuditList")]
		[ResultType(typeof(GetAuditListResult))]
		public IMultipleResults GetAuditList([Parameter(Name="UserName", DbType="VarChar(128)")] string userName, [Parameter(Name="TableName", DbType="VarChar(128)")] string tableName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, tableName);
			return ((IMultipleResults)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetGroupDetails")]
		public ISingleResult<GetGroupDetailsResult> GetGroupDetails([Parameter(Name="Id", DbType="VarChar(50)")] string id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<GetGroupDetailsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetGroupList")]
		public ISingleResult<GetGroupListResult> GetGroupList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetGroupListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetGroupModule")]
		public ISingleResult<GetGroupModuleResult> GetGroupModule([Parameter(Name="GroupId", DbType="VarChar(50)")] string groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId);
			return ((ISingleResult<GetGroupModuleResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetModuleList")]
		public ISingleResult<GetModuleListResult> GetModuleList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetModuleListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetNextCode")]
		[return: Parameter(DbType="Int")]
		public int GetNextCode([Parameter(Name="TableName", DbType="VarChar(50)")] string tableName, [Parameter(Name="FieldName", DbType="VarChar(50)")] string fieldName, [Parameter(Name="Lenght", DbType="VarChar(10)")] string lenght, [Parameter(Name="Id", DbType="VarChar(50)")] ref string id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, fieldName, lenght, id);
			id = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetProjectDetails")]
		public ISingleResult<GetProjectDetailsResult> GetProjectDetails([Parameter(Name="Id", DbType="VarChar(50)")] string id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<GetProjectDetailsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetProjectList")]
		public ISingleResult<GetProjectListResult> GetProjectList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetProjectListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetProjectListForReport")]
		public ISingleResult<GetProjectListForReportResult> GetProjectListForReport()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetProjectListForReportResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetTableNames")]
		public ISingleResult<GetTableNamesResult> GetTableNames()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetTableNamesResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetUserDetails")]
		public ISingleResult<GetUserDetailsResult> GetUserDetails([Parameter(Name="Id", DbType="VarChar(50)")] string id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<GetUserDetailsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetUserDetailsByUserName")]
		public ISingleResult<GetUserDetailsByUserNameResult> GetUserDetailsByUserName([Parameter(Name="UserName", DbType="VarChar(50)")] string userName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName);
			return ((ISingleResult<GetUserDetailsByUserNameResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetUserGroup")]
		public ISingleResult<GetUserGroupResult> GetUserGroup([Parameter(Name="UserId", DbType="VarChar(50)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<GetUserGroupResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetUserList")]
		public ISingleResult<GetUserListResult> GetUserList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetUserListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetUserProjectList")]
		public ISingleResult<GetUserProjectListResult> GetUserProjectList([Parameter(Name="UserId", DbType="VarChar(50)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<GetUserProjectListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetUserProjects")]
		public ISingleResult<GetUserProjectsResult> GetUserProjects([Parameter(Name="UserId", DbType="VarChar(50)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<GetUserProjectsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.IsCodeExist")]
		public ISingleResult<IsCodeExistResult> IsCodeExist([Parameter(Name="OriginalValue", DbType="VarChar(50)")] string originalValue, [Parameter(Name="CurrentValue", DbType="VarChar(50)")] string currentValue, [Parameter(Name="Table", DbType="VarChar(50)")] string table, [Parameter(Name="Field", DbType="VarChar(50)")] string field, [Parameter(Name="Operation", DbType="VarChar(10)")] string operation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), originalValue, currentValue, table, field, operation);
			return ((ISingleResult<IsCodeExistResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.IsGroupAllowToDelete", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> IsGroupAllowToDelete([Parameter(Name="GroupId", DbType="VarChar(50)")] string groupId)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId).ReturnValue));
		}
		
		[Function(Name="dbo.IsProjectAllowToDelete", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> IsProjectAllowToDelete([Parameter(Name="ProjectId", DbType="VarChar(50)")] string projectId)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projectId).ReturnValue));
		}
		
		[Function(Name="dbo.IsUserValid", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> IsUserValid([Parameter(Name="UserName", DbType="VarChar(50)")] string userName, [Parameter(Name="Password", DbType="VarChar(50)")] string password)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, password).ReturnValue));
		}
		
		[Function(Name="dbo.RestoreDatabase")]
		[return: Parameter(DbType="Int")]
		public int RestoreDatabase()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveActiveDirectoryGroup")]
		[return: Parameter(DbType="Int")]
		public int SaveActiveDirectoryGroup([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Name", DbType="VarChar(255)")] string name, [Parameter(Name="Domain", DbType="VarChar(50)")] string domain, [Parameter(Name="Operation", DbType="VarChar(50)")] string operation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, domain, operation);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveGroup")]
		[return: Parameter(DbType="Int")]
		public int SaveGroup([Parameter(Name="Id", DbType="VarChar(50)")] ref string id, [Parameter(Name="Name", DbType="VarChar(50)")] string name, [Parameter(Name="Desc", DbType="VarChar(255)")] string desc, [Parameter(Name="CreatedBy", DbType="VarChar(50)")] string createdBy, [Parameter(Name="Operation", DbType="VarChar(50)")] string operation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, desc, createdBy, operation);
			id = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveGroupModule")]
		[return: Parameter(DbType="Int")]
		public int SaveGroupModule([Parameter(Name="Id", DbType="BigInt")] System.Nullable<long> id, [Parameter(Name="GroupId", DbType="VarChar(50)")] string groupId, [Parameter(Name="ModuleId", DbType="Int")] System.Nullable<int> moduleId, [Parameter(Name="CanView", DbType="Bit")] System.Nullable<bool> canView, [Parameter(Name="CanAdd", DbType="Bit")] System.Nullable<bool> canAdd, [Parameter(Name="CanEdit", DbType="Bit")] System.Nullable<bool> canEdit, [Parameter(Name="CanDelete", DbType="Bit")] System.Nullable<bool> canDelete)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, groupId, moduleId, canView, canAdd, canEdit, canDelete);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SavePreferences")]
		[return: Parameter(DbType="Int")]
		public int SavePreferences([Parameter(Name="Id", DbType="Int")] System.Nullable<int> id, [Parameter(Name="Tag", DbType="VarChar(50)")] string tag, [Parameter(Name="Value", DbType="VarChar(50)")] string value, [Parameter(Name="Operation", DbType="VarChar(50)")] string operation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, tag, value, operation);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveProject")]
		[return: Parameter(DbType="Int")]
		public int SaveProject(
					[Parameter(Name="Id", DbType="VarChar(50)")] ref string id, 
					[Parameter(Name="Name", DbType="VarChar(50)")] string name, 
					[Parameter(Name="Desc", DbType="VarChar(255)")] string desc, 
					[Parameter(Name="Version", DbType="VarChar(50)")] string version, 
					[Parameter(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, 
					[Parameter(Name="BusinessOwner", DbType="VarChar(50)")] string businessOwner, 
					[Parameter(Name="Tester", DbType="VarChar(50)")] string tester, 
					[Parameter(Name="OtherContact", DbType="VarChar(50)")] string otherContact, 
					[Parameter(Name="Provider", DbType="VarChar(50)")] string provider, 
					[Parameter(Name="File", DbType="VarChar(255)")] string file, 
					[Parameter(Name="EnableByPassKey", DbType="Bit")] System.Nullable<bool> enableByPassKey, 
					[Parameter(Name="HasOtherDetails", DbType="Bit")] System.Nullable<bool> hasOtherDetails, 
					[Parameter(Name="MDW", DbType="VarChar(255)")] string mDW, 
					[Parameter(Name="Datasource", DbType="VarChar(50)")] string datasource, 
					[Parameter(Name="DatabaseName", DbType="VarChar(50)")] string databaseName, 
					[Parameter(Name="UserId", DbType="VarChar(50)")] string userId, 
					[Parameter(Name="Password", DbType="VarChar(50)")] string password, 
					[Parameter(Name="SharepointURL", DbType="VarChar(MAX)")] string sharepointURL, 
					[Parameter(Name="PathErrorLog", DbType="VarChar(MAX)")] string pathErrorLog, 
					[Parameter(Name="CreatedBy", DbType="VarChar(50)")] string createdBy, 
					[Parameter(Name="Operation", DbType="VarChar(50)")] string operation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, desc, version, isActive, businessOwner, tester, otherContact, provider, file, enableByPassKey, hasOtherDetails, mDW, datasource, databaseName, userId, password, sharepointURL, pathErrorLog, createdBy, operation);
			id = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveTempTable")]
		[return: Parameter(DbType="Int")]
		public int SaveTempTable([Parameter(DbType="NVarChar(50)")] ref string val)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), val);
			val = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveUser")]
		[return: Parameter(DbType="Int")]
		public int SaveUser([Parameter(Name="Id", DbType="VarChar(50)")] ref string id, [Parameter(Name="LastName", DbType="VarChar(50)")] string lastName, [Parameter(Name="FirstName", DbType="VarChar(50)")] string firstName, [Parameter(Name="MiddleName", DbType="VarChar(50)")] string middleName, [Parameter(Name="UserName", DbType="VarChar(50)")] string userName, [Parameter(Name="Password", DbType="VarChar(50)")] string password, [Parameter(Name="CreatedBy", DbType="VarChar(50)")] string createdBy, [Parameter(Name="Operation", DbType="VarChar(10)")] string operation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, lastName, firstName, middleName, userName, password, createdBy, operation);
			id = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveUserGroup")]
		[return: Parameter(DbType="Int")]
		public int SaveUserGroup([Parameter(Name="Id", DbType="BigInt")] System.Nullable<long> id, [Parameter(Name="UserId", DbType="VarChar(50)")] string userId, [Parameter(Name="GroupId", DbType="VarChar(50)")] string groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, userId, groupId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SaveUserProject")]
		[return: Parameter(DbType="Int")]
		public int SaveUserProject([Parameter(Name="Id", DbType="BigInt")] System.Nullable<long> id, [Parameter(Name="UserId", DbType="VarChar(50)")] string userId, [Parameter(Name="ProjId", DbType="VarChar(50)")] string projId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, userId, projId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.TestSQL")]
		[return: Parameter(DbType="Int")]
		public int TestSQL()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.ActiveDirectoryGroup")]
	public partial class ActiveDirectoryGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Domain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    #endregion
		
		public ActiveDirectoryGroup()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(2550) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="VarChar(50)")]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Audit")]
	public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditID;
		
		private string _Type;
		
		private string _TableName;
		
		private string _PK;
		
		private string _FieldName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UserName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIDChanging(int value);
    partial void OnAuditIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnPKChanging(string value);
    partial void OnPKChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public Audit()
		{
			OnCreated();
		}
		
		[Column(Storage="_AuditID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					this.OnAuditIDChanging(value);
					this.SendPropertyChanging();
					this._AuditID = value;
					this.SendPropertyChanged("AuditID");
					this.OnAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TableName", DbType="VarChar(128)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[Column(Storage="_PK", DbType="VarChar(1000)")]
		public string PK
		{
			get
			{
				return this._PK;
			}
			set
			{
				if ((this._PK != value))
				{
					this.OnPKChanging(value);
					this.SendPropertyChanging();
					this._PK = value;
					this.SendPropertyChanged("PK");
					this.OnPKChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="VarChar(128)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_OldValue", DbType="VarChar(1000)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[Column(Storage="_NewValue", DbType="VarChar(1000)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(128)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Group")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private string _Desc;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.DateTime _Timestamp;
		
		private EntitySet<GroupModule> _GroupModule;
		
		private EntitySet<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public Group()
		{
			this._GroupModule = new EntitySet<GroupModule>(new Action<GroupModule>(this.attach_GroupModule), new Action<GroupModule>(this.detach_GroupModule));
			this._UserGroup = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroup), new Action<UserGroup>(this.detach_UserGroup));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupModule", Storage="_GroupModule", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<GroupModule> GroupModule
		{
			get
			{
				return this._GroupModule;
			}
			set
			{
				this._GroupModule.Assign(value);
			}
		}
		
		[Association(Name="Group_UserGroup", Storage="_UserGroup", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<UserGroup> UserGroup
		{
			get
			{
				return this._UserGroup;
			}
			set
			{
				this._UserGroup.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupModule(GroupModule entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupModule(GroupModule entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.GroupModule")]
	public partial class GroupModule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _ModuleId;
		
		private string _GroupId;
		
		private bool _CanView;
		
		private bool _CanAdd;
		
		private bool _CanEdit;
		
		private bool _CanDelete;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnGroupIdChanging(string value);
    partial void OnGroupIdChanged();
    partial void OnCanViewChanging(bool value);
    partial void OnCanViewChanged();
    partial void OnCanAddChanging(bool value);
    partial void OnCanAddChanged();
    partial void OnCanEditChanging(bool value);
    partial void OnCanEditChanged();
    partial void OnCanDeleteChanging(bool value);
    partial void OnCanDeleteChanged();
    #endregion
		
		public GroupModule()
		{
			this._Group = default(EntityRef<Group>);
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleId", DbType="Int NOT NULL")]
		public int ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_CanView", DbType="Bit NOT NULL")]
		public bool CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[Column(Storage="_CanAdd", DbType="Bit NOT NULL")]
		public bool CanAdd
		{
			get
			{
				return this._CanAdd;
			}
			set
			{
				if ((this._CanAdd != value))
				{
					this.OnCanAddChanging(value);
					this.SendPropertyChanging();
					this._CanAdd = value;
					this.SendPropertyChanged("CanAdd");
					this.OnCanAddChanged();
				}
			}
		}
		
		[Column(Storage="_CanEdit", DbType="Bit NOT NULL")]
		public bool CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[Column(Storage="_CanDelete", DbType="Bit NOT NULL")]
		public bool CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupModule", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupModule.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupModule.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(string);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="Module_GroupModule", Storage="_Module", ThisKey="ModuleId", OtherKey="Id", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.GroupModule.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.GroupModule.Add(this);
						this._ModuleId = value.Id;
					}
					else
					{
						this._ModuleId = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Module")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Tag;
		
		private EntitySet<GroupModule> _GroupModule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
		
		public Module()
		{
			this._GroupModule = new EntitySet<GroupModule>(new Action<GroupModule>(this.attach_GroupModule), new Action<GroupModule>(this.detach_GroupModule));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Association(Name="Module_GroupModule", Storage="_GroupModule", ThisKey="Id", OtherKey="ModuleId")]
		public EntitySet<GroupModule> GroupModule
		{
			get
			{
				return this._GroupModule;
			}
			set
			{
				this._GroupModule.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupModule(GroupModule entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_GroupModule(GroupModule entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[Table(Name="dbo.Preferences")]
	public partial class Preferences : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Tag;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Preferences()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private string _Desc;
		
		private string _Version;
		
		private bool _IsActive;
		
		private string _BusinessOwner;
		
		private string _Tester;
		
		private string _OtherContact;
		
		private string _Provider;
		
		private string _File;
		
		private bool _EnableBypassKey;
		
		private bool _HasOtherDetails;
		
		private string _MDW;
		
		private string _Datasource;
		
		private string _DatabaseName;
		
		private string _UserID;
		
		private string _Password;
		
		private string _SharepointURL;
		
		private string _PathErrorLog;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.DateTime _TimeStamp;
		
		private EntitySet<UserProject> _UserProject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnBusinessOwnerChanging(string value);
    partial void OnBusinessOwnerChanged();
    partial void OnTesterChanging(string value);
    partial void OnTesterChanged();
    partial void OnOtherContactChanging(string value);
    partial void OnOtherContactChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnFileChanging(string value);
    partial void OnFileChanged();
    partial void OnEnableBypassKeyChanging(bool value);
    partial void OnEnableBypassKeyChanged();
    partial void OnHasOtherDetailsChanging(bool value);
    partial void OnHasOtherDetailsChanged();
    partial void OnMDWChanging(string value);
    partial void OnMDWChanged();
    partial void OnDatasourceChanging(string value);
    partial void OnDatasourceChanged();
    partial void OnDatabaseNameChanging(string value);
    partial void OnDatabaseNameChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSharepointURLChanging(string value);
    partial void OnSharepointURLChanged();
    partial void OnPathErrorLogChanging(string value);
    partial void OnPathErrorLogChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Project()
		{
			this._UserProject = new EntitySet<UserProject>(new Action<UserProject>(this.attach_UserProject), new Action<UserProject>(this.detach_UserProject));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessOwner", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessOwner
		{
			get
			{
				return this._BusinessOwner;
			}
			set
			{
				if ((this._BusinessOwner != value))
				{
					this.OnBusinessOwnerChanging(value);
					this.SendPropertyChanging();
					this._BusinessOwner = value;
					this.SendPropertyChanged("BusinessOwner");
					this.OnBusinessOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_Tester", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Tester
		{
			get
			{
				return this._Tester;
			}
			set
			{
				if ((this._Tester != value))
				{
					this.OnTesterChanging(value);
					this.SendPropertyChanging();
					this._Tester = value;
					this.SendPropertyChanged("Tester");
					this.OnTesterChanged();
				}
			}
		}
		
		[Column(Storage="_OtherContact", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OtherContact
		{
			get
			{
				return this._OtherContact;
			}
			set
			{
				if ((this._OtherContact != value))
				{
					this.OnOtherContactChanging(value);
					this.SendPropertyChanging();
					this._OtherContact = value;
					this.SendPropertyChanged("OtherContact");
					this.OnOtherContactChanged();
				}
			}
		}
		
		[Column(Storage="_Provider", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[Column(Storage="_File", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this.OnFileChanging(value);
					this.SendPropertyChanging();
					this._File = value;
					this.SendPropertyChanged("File");
					this.OnFileChanged();
				}
			}
		}
		
		[Column(Storage="_EnableBypassKey", DbType="Bit NOT NULL")]
		public bool EnableBypassKey
		{
			get
			{
				return this._EnableBypassKey;
			}
			set
			{
				if ((this._EnableBypassKey != value))
				{
					this.OnEnableBypassKeyChanging(value);
					this.SendPropertyChanging();
					this._EnableBypassKey = value;
					this.SendPropertyChanged("EnableBypassKey");
					this.OnEnableBypassKeyChanged();
				}
			}
		}
		
		[Column(Storage="_HasOtherDetails", DbType="Bit NOT NULL")]
		public bool HasOtherDetails
		{
			get
			{
				return this._HasOtherDetails;
			}
			set
			{
				if ((this._HasOtherDetails != value))
				{
					this.OnHasOtherDetailsChanging(value);
					this.SendPropertyChanging();
					this._HasOtherDetails = value;
					this.SendPropertyChanged("HasOtherDetails");
					this.OnHasOtherDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_MDW", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string MDW
		{
			get
			{
				return this._MDW;
			}
			set
			{
				if ((this._MDW != value))
				{
					this.OnMDWChanging(value);
					this.SendPropertyChanging();
					this._MDW = value;
					this.SendPropertyChanged("MDW");
					this.OnMDWChanged();
				}
			}
		}
		
		[Column(Storage="_Datasource", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Datasource
		{
			get
			{
				return this._Datasource;
			}
			set
			{
				if ((this._Datasource != value))
				{
					this.OnDatasourceChanging(value);
					this.SendPropertyChanging();
					this._Datasource = value;
					this.SendPropertyChanged("Datasource");
					this.OnDatasourceChanged();
				}
			}
		}
		
		[Column(Storage="_DatabaseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DatabaseName
		{
			get
			{
				return this._DatabaseName;
			}
			set
			{
				if ((this._DatabaseName != value))
				{
					this.OnDatabaseNameChanging(value);
					this.SendPropertyChanging();
					this._DatabaseName = value;
					this.SendPropertyChanged("DatabaseName");
					this.OnDatabaseNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_SharepointURL", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SharepointURL
		{
			get
			{
				return this._SharepointURL;
			}
			set
			{
				if ((this._SharepointURL != value))
				{
					this.OnSharepointURLChanging(value);
					this.SendPropertyChanging();
					this._SharepointURL = value;
					this.SendPropertyChanged("SharepointURL");
					this.OnSharepointURLChanged();
				}
			}
		}
		
		[Column(Storage="_PathErrorLog", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PathErrorLog
		{
			get
			{
				return this._PathErrorLog;
			}
			set
			{
				if ((this._PathErrorLog != value))
				{
					this.OnPathErrorLogChanging(value);
					this.SendPropertyChanging();
					this._PathErrorLog = value;
					this.SendPropertyChanged("PathErrorLog");
					this.OnPathErrorLogChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Project_UserProject", Storage="_UserProject", ThisKey="Id", OtherKey="ProjId")]
		public EntitySet<UserProject> UserProject
		{
			get
			{
				return this._UserProject;
			}
			set
			{
				this._UserProject.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProject(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UserProject(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[Table(Name="dbo.TempTable")]
	public partial class TempTable
	{
		
		private string _Val;
		
		public TempTable()
		{
		}
		
		[Column(Name="val", Storage="_Val", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Val
		{
			get
			{
				return this._Val;
			}
			set
			{
				if ((this._Val != value))
				{
					this._Val = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _UserName;
		
		private string _Password;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.DateTime _TimeStamp;
		
		private EntitySet<UserGroup> _UserGroup;
		
		private EntitySet<UserProject> _UserProject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    #endregion
		
		public User()
		{
			this._UserGroup = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroup), new Action<UserGroup>(this.detach_UserGroup));
			this._UserProject = new EntitySet<UserProject>(new Action<UserProject>(this.attach_UserProject), new Action<UserProject>(this.detach_UserProject));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="User_UserGroup", Storage="_UserGroup", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserGroup> UserGroup
		{
			get
			{
				return this._UserGroup;
			}
			set
			{
				this._UserGroup.Assign(value);
			}
		}
		
		[Association(Name="User_UserProject", Storage="_UserProject", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserProject> UserProject
		{
			get
			{
				return this._UserProject;
			}
			set
			{
				this._UserProject.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserProject(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserProject(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _UserId;
		
		private string _GroupId;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(string value);
    partial void OnGroupIdChanged();
    #endregion
		
		public UserGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Association(Name="Group_UserGroup", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserGroup.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserGroup.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(string);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="User_UserGroup", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroup.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroup.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserProject")]
	public partial class UserProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _UserId;
		
		private string _ProjId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnProjIdChanging(string value);
    partial void OnProjIdChanged();
    #endregion
		
		public UserProject()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProjId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjId
		{
			get
			{
				return this._ProjId;
			}
			set
			{
				if ((this._ProjId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjIdChanging(value);
					this.SendPropertyChanging();
					this._ProjId = value;
					this.SendPropertyChanged("ProjId");
					this.OnProjIdChanged();
				}
			}
		}
		
		[Association(Name="Project_UserProject", Storage="_Project", ThisKey="ProjId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.UserProject.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.UserProject.Add(this);
						this._ProjId = value.Id;
					}
					else
					{
						this._ProjId = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[Association(Name="User_UserProject", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProject.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProject.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class CreateSQLUSERResult
	{
		
		private string _LoginType;
		
		private string _SrvLogin;
		
		private string _DbUser;
		
		private string _DbRole;
		
		public CreateSQLUSERResult()
		{
		}
		
		[Column(Name="Login Type", Storage="_LoginType", DbType="VarChar(3)")]
		public string LoginType
		{
			get
			{
				return this._LoginType;
			}
			set
			{
				if ((this._LoginType != value))
				{
					this._LoginType = value;
				}
			}
		}
		
		[Column(Name="srvLogin", Storage="_SrvLogin", DbType="Char(45)")]
		public string SrvLogin
		{
			get
			{
				return this._SrvLogin;
			}
			set
			{
				if ((this._SrvLogin != value))
				{
					this._SrvLogin = value;
				}
			}
		}
		
		[Column(Name="dbUser", Storage="_DbUser", DbType="Char(25)")]
		public string DbUser
		{
			get
			{
				return this._DbUser;
			}
			set
			{
				if ((this._DbUser != value))
				{
					this._DbUser = value;
				}
			}
		}
		
		[Column(Name="dbRole", Storage="_DbRole", DbType="Char(25)")]
		public string DbRole
		{
			get
			{
				return this._DbRole;
			}
			set
			{
				if ((this._DbRole != value))
				{
					this._DbRole = value;
				}
			}
		}
	}
	
	public partial class GetAccessRightsResult
	{
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanAdd;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanDelete;
		
		public GetAccessRightsResult()
		{
		}
		
		[Column(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this._CanView = value;
				}
			}
		}
		
		[Column(Storage="_CanAdd", DbType="Bit")]
		public System.Nullable<bool> CanAdd
		{
			get
			{
				return this._CanAdd;
			}
			set
			{
				if ((this._CanAdd != value))
				{
					this._CanAdd = value;
				}
			}
		}
		
		[Column(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this._CanEdit = value;
				}
			}
		}
		
		[Column(Storage="_CanDelete", DbType="Bit")]
		public System.Nullable<bool> CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this._CanDelete = value;
				}
			}
		}
	}
	
	public partial class GetActiveDirectoryGroupListResult
	{
		
		private System.Nullable<int> _Id;
		
		private string _Name;
		
		private string _Domain;
		
		public GetActiveDirectoryGroupListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="Int")]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(2550)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="VarChar(50)")]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this._Domain = value;
				}
			}
		}
	}
	
	public partial class GetAuditListResult
	{
		
		private System.Nullable<int> _AuditID;
		
		private string _Type;
		
		private string _TableName;
		
		private string _PK;
		
		private string _FieldName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UserName;
		
		public GetAuditListResult()
		{
		}
		
		[Column(Storage="_AuditID", DbType="Int")]
		public System.Nullable<int> AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					this._AuditID = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="VarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_TableName", DbType="VarChar(128)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
		
		[Column(Storage="_PK", DbType="VarChar(1000)")]
		public string PK
		{
			get
			{
				return this._PK;
			}
			set
			{
				if ((this._PK != value))
				{
					this._PK = value;
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="VarChar(128)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this._FieldName = value;
				}
			}
		}
		
		[Column(Storage="_OldValue", DbType="VarChar(1000)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this._OldValue = value;
				}
			}
		}
		
		[Column(Storage="_NewValue", DbType="VarChar(1000)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this._NewValue = value;
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this._UpdateDate = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(128)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
	}
	
	public partial class GetGroupDetailsResult
	{
		
		private string _Name;
		
		private string _Desc;
		
		public GetGroupDetailsResult()
		{
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
	}
	
	public partial class GetGroupListResult
	{
		
		private string _Id;
		
		private string _Name;
		
		private string _Desc;
		
		public GetGroupListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="VarChar(50)")]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
	}
	
	public partial class GetGroupModuleResult
	{
		
		private System.Nullable<long> _Id;
		
		private string _GroupId;
		
		private System.Nullable<int> _ModuleId;
		
		private string _Name;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanAdd;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanDelete;
		
		public GetGroupModuleResult()
		{
		}
		
		[Column(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="VarChar(50)")]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[Column(Storage="_ModuleId", DbType="Int")]
		public System.Nullable<int> ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					this._ModuleId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this._CanView = value;
				}
			}
		}
		
		[Column(Storage="_CanAdd", DbType="Bit")]
		public System.Nullable<bool> CanAdd
		{
			get
			{
				return this._CanAdd;
			}
			set
			{
				if ((this._CanAdd != value))
				{
					this._CanAdd = value;
				}
			}
		}
		
		[Column(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this._CanEdit = value;
				}
			}
		}
		
		[Column(Storage="_CanDelete", DbType="Bit")]
		public System.Nullable<bool> CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this._CanDelete = value;
				}
			}
		}
	}
	
	public partial class GetModuleListResult
	{
		
		private System.Nullable<int> _Id;
		
		private string _Name;
		
		private string _Tag;
		
		public GetModuleListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="Int")]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="VarChar(255)")]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
	}
	
	public partial class GetProjectDetailsResult
	{
		
		private string _Name;
		
		private string _Desc;
		
		private string _Version;
		
		private System.Nullable<bool> _IsActive;
		
		private string _BusinessOwner;
		
		private string _Tester;
		
		private string _OtherContact;
		
		private string _Provider;
		
		private string _File;
		
		private System.Nullable<bool> _EnableBypassKey;
		
		private System.Nullable<bool> _HasOtherDetails;
		
		private string _MDW;
		
		private string _Datasource;
		
		private string _DatabaseName;
		
		private string _UserID;
		
		private string _Password;
		
		private string _SharepointURL;
		
		private string _PathErrorLog;
		
		private string _CreatedBy;
		
		public GetProjectDetailsResult()
		{
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_BusinessOwner", DbType="VarChar(50)")]
		public string BusinessOwner
		{
			get
			{
				return this._BusinessOwner;
			}
			set
			{
				if ((this._BusinessOwner != value))
				{
					this._BusinessOwner = value;
				}
			}
		}
		
		[Column(Storage="_Tester", DbType="VarChar(50)")]
		public string Tester
		{
			get
			{
				return this._Tester;
			}
			set
			{
				if ((this._Tester != value))
				{
					this._Tester = value;
				}
			}
		}
		
		[Column(Storage="_OtherContact", DbType="VarChar(50)")]
		public string OtherContact
		{
			get
			{
				return this._OtherContact;
			}
			set
			{
				if ((this._OtherContact != value))
				{
					this._OtherContact = value;
				}
			}
		}
		
		[Column(Storage="_Provider", DbType="VarChar(50)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this._Provider = value;
				}
			}
		}
		
		[Column(Storage="_File", DbType="VarChar(255)")]
		public string File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this._File = value;
				}
			}
		}
		
		[Column(Storage="_EnableBypassKey", DbType="Bit")]
		public System.Nullable<bool> EnableBypassKey
		{
			get
			{
				return this._EnableBypassKey;
			}
			set
			{
				if ((this._EnableBypassKey != value))
				{
					this._EnableBypassKey = value;
				}
			}
		}
		
		[Column(Storage="_HasOtherDetails", DbType="Bit")]
		public System.Nullable<bool> HasOtherDetails
		{
			get
			{
				return this._HasOtherDetails;
			}
			set
			{
				if ((this._HasOtherDetails != value))
				{
					this._HasOtherDetails = value;
				}
			}
		}
		
		[Column(Storage="_MDW", DbType="VarChar(255)")]
		public string MDW
		{
			get
			{
				return this._MDW;
			}
			set
			{
				if ((this._MDW != value))
				{
					this._MDW = value;
				}
			}
		}
		
		[Column(Storage="_Datasource", DbType="VarChar(50)")]
		public string Datasource
		{
			get
			{
				return this._Datasource;
			}
			set
			{
				if ((this._Datasource != value))
				{
					this._Datasource = value;
				}
			}
		}
		
		[Column(Storage="_DatabaseName", DbType="VarChar(50)")]
		public string DatabaseName
		{
			get
			{
				return this._DatabaseName;
			}
			set
			{
				if ((this._DatabaseName != value))
				{
					this._DatabaseName = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[Column(Storage="_SharepointURL", DbType="VarChar(MAX)")]
		public string SharepointURL
		{
			get
			{
				return this._SharepointURL;
			}
			set
			{
				if ((this._SharepointURL != value))
				{
					this._SharepointURL = value;
				}
			}
		}
		
		[Column(Storage="_PathErrorLog", DbType="VarChar(MAX)")]
		public string PathErrorLog
		{
			get
			{
				return this._PathErrorLog;
			}
			set
			{
				if ((this._PathErrorLog != value))
				{
					this._PathErrorLog = value;
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
	}
	
	public partial class GetProjectListResult
	{
		
		private string _Id;
		
		private string _Name;
		
		private string _Desc;
		
		private string _Version;
		
		private System.Nullable<bool> _IsActive;
		
		public GetProjectListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="VarChar(50)")]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
	}
	
	public partial class GetProjectListForReportResult
	{
		
		private string _Id;
		
		private string _Name;
		
		private string _Desc;
		
		private string _Version;
		
		private System.Nullable<bool> _IsActive;
		
		private string _BusinessOwner;
		
		private string _Tester;
		
		private string _OtherContact;
		
		private string _Provider;
		
		private string _File;
		
		private System.Nullable<bool> _EnableBypassKey;
		
		private System.Nullable<bool> _HasOtherDetails;
		
		private string _MDW;
		
		private string _Datasource;
		
		private string _DatabaseName;
		
		private string _UserID;
		
		private string _Password;
		
		private string _SharepointURL;
		
		private string _PathErrorLog;
		
		private string _CreatedBy;
		
		public GetProjectListForReportResult()
		{
		}
		
		[Column(Storage="_Id", DbType="VarChar(50)")]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_BusinessOwner", DbType="VarChar(50)")]
		public string BusinessOwner
		{
			get
			{
				return this._BusinessOwner;
			}
			set
			{
				if ((this._BusinessOwner != value))
				{
					this._BusinessOwner = value;
				}
			}
		}
		
		[Column(Storage="_Tester", DbType="VarChar(50)")]
		public string Tester
		{
			get
			{
				return this._Tester;
			}
			set
			{
				if ((this._Tester != value))
				{
					this._Tester = value;
				}
			}
		}
		
		[Column(Storage="_OtherContact", DbType="VarChar(50)")]
		public string OtherContact
		{
			get
			{
				return this._OtherContact;
			}
			set
			{
				if ((this._OtherContact != value))
				{
					this._OtherContact = value;
				}
			}
		}
		
		[Column(Storage="_Provider", DbType="VarChar(50)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this._Provider = value;
				}
			}
		}
		
		[Column(Storage="_File", DbType="VarChar(255)")]
		public string File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this._File = value;
				}
			}
		}
		
		[Column(Storage="_EnableBypassKey", DbType="Bit")]
		public System.Nullable<bool> EnableBypassKey
		{
			get
			{
				return this._EnableBypassKey;
			}
			set
			{
				if ((this._EnableBypassKey != value))
				{
					this._EnableBypassKey = value;
				}
			}
		}
		
		[Column(Storage="_HasOtherDetails", DbType="Bit")]
		public System.Nullable<bool> HasOtherDetails
		{
			get
			{
				return this._HasOtherDetails;
			}
			set
			{
				if ((this._HasOtherDetails != value))
				{
					this._HasOtherDetails = value;
				}
			}
		}
		
		[Column(Storage="_MDW", DbType="VarChar(255)")]
		public string MDW
		{
			get
			{
				return this._MDW;
			}
			set
			{
				if ((this._MDW != value))
				{
					this._MDW = value;
				}
			}
		}
		
		[Column(Storage="_Datasource", DbType="VarChar(50)")]
		public string Datasource
		{
			get
			{
				return this._Datasource;
			}
			set
			{
				if ((this._Datasource != value))
				{
					this._Datasource = value;
				}
			}
		}
		
		[Column(Storage="_DatabaseName", DbType="VarChar(50)")]
		public string DatabaseName
		{
			get
			{
				return this._DatabaseName;
			}
			set
			{
				if ((this._DatabaseName != value))
				{
					this._DatabaseName = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[Column(Storage="_SharepointURL", DbType="VarChar(MAX)")]
		public string SharepointURL
		{
			get
			{
				return this._SharepointURL;
			}
			set
			{
				if ((this._SharepointURL != value))
				{
					this._SharepointURL = value;
				}
			}
		}
		
		[Column(Storage="_PathErrorLog", DbType="VarChar(MAX)")]
		public string PathErrorLog
		{
			get
			{
				return this._PathErrorLog;
			}
			set
			{
				if ((this._PathErrorLog != value))
				{
					this._PathErrorLog = value;
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
	}
	
	public partial class GetTableNamesResult
	{
		
		private string _TableName;
		
		public GetTableNamesResult()
		{
		}
		
		[Column(Storage="_TableName", DbType="NVarChar(128)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this._TableName = value;
				}
			}
		}
	}
	
	public partial class GetUserDetailsResult
	{
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _UserName;
		
		private string _Password;
		
		public GetUserDetailsResult()
		{
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
	}
	
	public partial class GetUserDetailsByUserNameResult
	{
		
		private string _Id;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _FullName;
		
		public GetUserDetailsByUserNameResult()
		{
		}
		
		[Column(Storage="_Id", DbType="VarChar(50)")]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="VarChar(102)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	public partial class GetUserGroupResult
	{
		
		private System.Nullable<long> _Id;
		
		private string _UserId;
		
		private System.Nullable<bool> _IsSelected;
		
		private string _GroupId;
		
		private string _Name;
		
		private string _Desc;
		
		public GetUserGroupResult()
		{
		}
		
		[Column(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="VarChar(50)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[Column(Storage="_IsSelected", DbType="Bit")]
		public System.Nullable<bool> IsSelected
		{
			get
			{
				return this._IsSelected;
			}
			set
			{
				if ((this._IsSelected != value))
				{
					this._IsSelected = value;
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="VarChar(50)")]
		public string GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
	}
	
	public partial class GetUserListResult
	{
		
		private string _Id;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _UserName;
		
		private string _Password;
		
		public GetUserListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="VarChar(50)")]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
	}
	
	public partial class GetUserProjectListResult
	{
		
		private System.Nullable<long> _Id;
		
		private string _UserId;
		
		private System.Nullable<bool> _IsSelected;
		
		private string _ProjId;
		
		private string _Name;
		
		private string _Desc;
		
		public GetUserProjectListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="BigInt")]
		public System.Nullable<long> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="VarChar(50)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[Column(Storage="_IsSelected", DbType="Bit")]
		public System.Nullable<bool> IsSelected
		{
			get
			{
				return this._IsSelected;
			}
			set
			{
				if ((this._IsSelected != value))
				{
					this._IsSelected = value;
				}
			}
		}
		
		[Column(Storage="_ProjId", DbType="VarChar(50)")]
		public string ProjId
		{
			get
			{
				return this._ProjId;
			}
			set
			{
				if ((this._ProjId != value))
				{
					this._ProjId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
	}
	
	public partial class GetUserProjectsResult
	{
		
		private string _Id;
		
		private string _Name;
		
		private string _Desc;
		
		private string _Version;
		
		private System.Nullable<bool> _IsActive;
		
		private string _BusinessOwner;
		
		private string _Tester;
		
		private string _OtherContact;
		
		private string _Provider;
		
		private string _File;
		
		private System.Nullable<bool> _EnableBypassKey;
		
		private System.Nullable<bool> _HasOtherDetails;
		
		private string _MDW;
		
		private string _Datasource;
		
		private string _DatabaseName;
		
		private string _UserID;
		
		private string _Password;
		
		public GetUserProjectsResult()
		{
		}
		
		[Column(Storage="_Id", DbType="VarChar(50)")]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Desc", DbType="VarChar(255)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this._Desc = value;
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[Column(Storage="_BusinessOwner", DbType="VarChar(50)")]
		public string BusinessOwner
		{
			get
			{
				return this._BusinessOwner;
			}
			set
			{
				if ((this._BusinessOwner != value))
				{
					this._BusinessOwner = value;
				}
			}
		}
		
		[Column(Storage="_Tester", DbType="VarChar(50)")]
		public string Tester
		{
			get
			{
				return this._Tester;
			}
			set
			{
				if ((this._Tester != value))
				{
					this._Tester = value;
				}
			}
		}
		
		[Column(Storage="_OtherContact", DbType="VarChar(50)")]
		public string OtherContact
		{
			get
			{
				return this._OtherContact;
			}
			set
			{
				if ((this._OtherContact != value))
				{
					this._OtherContact = value;
				}
			}
		}
		
		[Column(Storage="_Provider", DbType="VarChar(50)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this._Provider = value;
				}
			}
		}
		
		[Column(Storage="_File", DbType="VarChar(255)")]
		public string File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this._File = value;
				}
			}
		}
		
		[Column(Storage="_EnableBypassKey", DbType="Bit")]
		public System.Nullable<bool> EnableBypassKey
		{
			get
			{
				return this._EnableBypassKey;
			}
			set
			{
				if ((this._EnableBypassKey != value))
				{
					this._EnableBypassKey = value;
				}
			}
		}
		
		[Column(Storage="_HasOtherDetails", DbType="Bit")]
		public System.Nullable<bool> HasOtherDetails
		{
			get
			{
				return this._HasOtherDetails;
			}
			set
			{
				if ((this._HasOtherDetails != value))
				{
					this._HasOtherDetails = value;
				}
			}
		}
		
		[Column(Storage="_MDW", DbType="VarChar(255)")]
		public string MDW
		{
			get
			{
				return this._MDW;
			}
			set
			{
				if ((this._MDW != value))
				{
					this._MDW = value;
				}
			}
		}
		
		[Column(Storage="_Datasource", DbType="VarChar(50)")]
		public string Datasource
		{
			get
			{
				return this._Datasource;
			}
			set
			{
				if ((this._Datasource != value))
				{
					this._Datasource = value;
				}
			}
		}
		
		[Column(Storage="_DatabaseName", DbType="VarChar(50)")]
		public string DatabaseName
		{
			get
			{
				return this._DatabaseName;
			}
			set
			{
				if ((this._DatabaseName != value))
				{
					this._DatabaseName = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="VarChar(50)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
	}
	
	public partial class IsCodeExistResult
	{
		
		private System.Nullable<bool> _IsExist;
		
		public IsCodeExistResult()
		{
		}
		
		[Column(Storage="_IsExist", DbType="Bit")]
		public System.Nullable<bool> IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this._IsExist = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
